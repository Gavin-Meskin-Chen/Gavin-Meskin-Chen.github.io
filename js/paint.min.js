class SmoothCorners{static get inputProperties(){return["--smooth-level"]}paint(e,t,o){const r=parseInt(o.get("--smooth-level").toString()),i=new Path2D;i.moveTo(r,0),i.lineTo(t.width-r,0),i.quadraticCurveTo(t.width,0,t.width,r),i.lineTo(t.width,t.height-r),i.quadraticCurveTo(t.width,t.height,t.width-r,t.height),i.lineTo(r,t.height),i.quadraticCurveTo(0,t.height,0,t.height-r),i.lineTo(0,r),i.quadraticCurveTo(0,0,r,0),e.fill(i)}}try{registerPaint("smooth-corners",SmoothCorners)}catch(e){}class SmoothCorners3{static get inputProperties(){return["--smooth-level","--over-level"]}paint(e,t,o){const r=parseInt(o.get("--smooth-level").toString()),i=parseFloat(o.get("--over-level").toString()),h=new Path2D,n=1-i;var l=t.width,s=t.height;h.moveTo(r,0),h.lineTo(l-r,0),h.bezierCurveTo(l-n*r,0,l,n*r,l,r),h.lineTo(l,s-r),h.bezierCurveTo(l,s-n*r,l-n*r,s,l-r,s),h.lineTo(r,s),h.bezierCurveTo(n*r,s,0,s-n*r,0,s-r),h.lineTo(0,r),h.bezierCurveTo(0,n*r,n*r,0,r,0),e.fill(h)}}try{registerPaint("smooth-corners-3",SmoothCorners3)}catch(e){}